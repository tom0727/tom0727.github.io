<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hugo on tom0727's blog</title><link>https://tom0727.github.io/tags/hugo/</link><description>Recent content in hugo on tom0727's blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 01 Feb 2021 21:21:41 +0800</lastBuildDate><atom:link href="https://tom0727.github.io/tags/hugo/index.xml" rel="self" type="application/rss+xml"/><item><title>Hugo博客搭建小记</title><link>https://tom0727.github.io/post/001-hugo-tutorial/</link><pubDate>Mon, 01 Feb 2021 21:21:41 +0800</pubDate><guid>https://tom0727.github.io/post/001-hugo-tutorial/</guid><description>&lt;h2 id="起因">起因&lt;/h2>
&lt;p>在几天前折腾了爬虫，成功爬下来&lt;a href="https://manga1001.com/%E3%80%90%E7%AC%AC1%E8%A9%B1%E3%80%91%E3%83%88%E3%83%8B%E3%82%AB%E3%82%AF%E3%82%AB%E3%83%AF%E3%82%A4%E3%82%A4-raw/" target="_blank">とにかくかわいい&lt;/a>的漫画以后，我发现我折腾似乎上瘾了。聊天时无意提到”要是我有个人网站就好了“，于是就决定动手开始构建咕咕已久的个人网站。&lt;/p>
&lt;p>由于我对自己的前端水平十分有数，所以想都没想就立刻放弃了“要不自己写一个网站？”的想法。&lt;/p>
&lt;p>后来想起之前逛过的ouuan大佬的博客非常好看，我的收藏夹里甚至还有他搭建博客的指南，就直接拿来用了，采用的是 &lt;strong>hugo + even主题 + github actions&lt;/strong>，参考资料如下:&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://ouuan.gitee.io/post/from-hexo-to-hugo/">https://ouuan.gitee.io/post/from-hexo-to-hugo/&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="搭建过程">搭建过程&lt;/h2>
&lt;h3 id="step-1-阅读指南">Step 1 阅读指南&lt;/h3>
&lt;p>首先阅读ouuan的指南(上述链接)，然后使用他的&lt;a href="https://github.com/ouuan/hugo-blog-template" target="_blank">hugo模版&lt;/a>，按照模版里指示的进行clone。&lt;/p>
&lt;h3 id="step-2-config的修改">Step 2 Config的修改&lt;/h3>
&lt;p>还是按照模版里指示的，修改一下配置文件&lt;code>config.toml&lt;/code>里的相关配置，一些需要更改的内容：&lt;/p>
&lt;ol>
&lt;li>包含&lt;code>yourname&lt;/code>的部分&lt;/li>
&lt;li>&lt;code>newContentEditor = &amp;quot;&amp;quot;&lt;/code>&lt;/li>
&lt;li>&lt;code>defaultContentLanguage = &amp;quot;en&amp;quot;&lt;/code>&lt;/li>
&lt;li>&lt;code>[[menu.main]]&lt;/code>的相关内容 (视情况进行保留和删除)&lt;/li>
&lt;li>&lt;strong>不要&lt;/strong>更改 &lt;code>[params]&lt;/code> 中的 &lt;code>version=&amp;quot;4.x&amp;quot;&lt;/code>&lt;/li>
&lt;/ol>
&lt;h3 id="step-25-创建repository">Step 2.5 创建repository&lt;/h3>
&lt;p>因为我打算部署到github pages上，就在github上创建一个新的repository，叫&lt;code>tom0727.github.io&lt;/code>&lt;/p>
&lt;h3 id="step-3-本地测试">Step 3 本地测试&lt;/h3>
&lt;p>配置完成后，可以 &lt;code>hugo new post/test.md&lt;/code> 创建一个新的post(在&lt;code>hugo-blog/content/post/test.md&lt;/code>), 按照markdown随便写点东西以后保存，然后 &lt;code>hugo server&lt;/code>，打开localhost看一下效果(也可以边写边看效果，热加载真香)。最后用&lt;code>hugo&lt;/code>命令生成静态文件，就是&lt;code>hugo-blog/public/&lt;/code>文件夹，把这个文件夹内的内容push到github上就可以了。&lt;/p>
&lt;p>注： blog的源代码和网页内容并不是一个东西!&lt;/p>
&lt;ol>
&lt;li>源代码: 是&lt;code>hugo-blog/&lt;/code> 下除了&lt;code>hugo-blog/public/&lt;/code>以外的内容，包含了 &lt;code>content/&lt;/code>, &lt;code>config.toml&lt;/code> 之类的文件。&lt;/li>
&lt;li>网页内容：只是 &lt;code>hugo-blog/public/&lt;/code>内的内容，有了源代码就可以用&lt;code>hugo&lt;/code>生成网页内容，但是反之就不可以！&lt;/li>
&lt;/ol>
&lt;p>既然两者有别，就要分开管理，我把它们放在同一个repository里，分成2个branch。源代码就放在了&lt;code>master&lt;/code>里，网页内容就放在&lt;code>publish&lt;/code>上了。&lt;/p>
&lt;h3 id="step-4-github-settings">Step 4 Github Settings&lt;/h3>
&lt;p>这个时候网页上应该是没有内容的，因为github pages需要设置一下指定deploy的branch，在repository的&lt;code>Settings&lt;/code>里，拉到下面看到&lt;code>GitHub Pages&lt;/code>，改一下Source branch就可以了：
&lt;img src="https://tom0727.github.io/images/001/1.png" alt="image">&lt;/p>
&lt;blockquote>
&lt;p>需要在博文里插入图片的话，假设图片位于 &lt;code>static/images/001/1.png&lt;/code>，就写上&lt;code>![image](/images/001/1.png)&lt;/code>&lt;/p>
&lt;p>如果是插入link的话，就写 &lt;code>[link_name](https://...)&lt;/code> 即可，外部链接记得加&lt;code>https://&lt;/code>，不然会被当作本地的某个文件位置。&lt;/p>
&lt;/blockquote>
&lt;p>这些步骤做完就可以了，当然这种修改然后发布的方式太麻烦了，切branch也很累，所以就有了Step 5:&lt;/p>
&lt;h3 id="step-5-github-actions">Step 5 Github Actions&lt;/h3>
&lt;p>我们配置一下Github actions，它能自动化部署流程。参考资料:&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://segmentfault.com/a/1190000021815477">https://segmentfault.com/a/1190000021815477&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>需要注意，因为源代码和网页内容在同一个repository里，就不用在github上折腾secret key之类的了，直接修改一下 &lt;code>hugo-blog/.github/workflows/deploy.yml&lt;/code> (这个是template里自带的) 即可：&lt;/p>
&lt;ol>
&lt;li>&lt;code>personal_token: ${{ secrets.GITHUB_TOKEN }}&lt;/code>&lt;/li>
&lt;li>&lt;code>publish_dir: ./public&lt;/code>&lt;/li>
&lt;li>&lt;code>publish_branch: publish&lt;/code>&lt;/li>
&lt;li>将 &lt;code>depth&lt;/code> 改成 &lt;code>fetch-depth&lt;/code> (不然build的时候会报错)&lt;/li>
&lt;/ol>
&lt;p>这样就完成了，从此以后，写一篇新文章的步骤就变成：&lt;/p>
&lt;ol>
&lt;li>&lt;code>hugo new post/article.md&lt;/code>&lt;/li>
&lt;li>修改位于&lt;code>content/post/article.md&lt;/code>的博客文章&lt;/li>
&lt;li>add, commit, 把源代码push到&lt;code>master&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>这样就可以了，不必切branch然后push网页内容了。&lt;/p>
&lt;blockquote>
&lt;p>push到&lt;code>master&lt;/code>以后，可以在repository的&lt;code>Actions&lt;/code>页面查看一下deploy的情况：
&lt;img src="https://tom0727.github.io/images/001/2.png" alt="image">&lt;/p>
&lt;/blockquote>
&lt;h3 id="step-6-gitee镜像">Step 6 gitee镜像&lt;/h3>
&lt;p>因为github.io似乎被墙了，所以学ouuan弄了一个gitee镜像，教程的话参照这两个就可以了：&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://jasonkayzk.github.io/2020/09/18/%E5%9C%A8Gitee%E6%90%AD%E5%BB%BAGithub-Pages/">https://jasonkayzk.github.io/2020/09/18/%E5%9C%A8Gitee%E6%90%AD%E5%BB%BAGithub-Pages/&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;a href="https://github.com/yanglbme/gitee-pages-action">https://github.com/yanglbme/gitee-pages-action&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>gitee镜像的访问网址：&lt;a href="https://tom0727.gitee.io" target="_blank">tom0727.gitee.io&lt;/a>&lt;/p>
&lt;p>注：在 &lt;code>hugo-blog/.github/workflows/sync.yml&lt;/code>里记得设置一下&lt;code>on&lt;/code>，不然触发不了自动部署。&lt;/p>
&lt;p>我这里设置的是：&lt;/p>
&lt;pre>&lt;code>on:
push:
branches:
- master
workflow_dispatch:
&lt;/code>&lt;/pre>
&lt;h3 id="step-7-评论区">Step 7 评论区&lt;/h3>
&lt;p>评论区用很多种，我选用了&lt;code>utterances&lt;/code>，部署步骤如下：&lt;/p>
&lt;ol>
&lt;li>在Github上安装 &lt;a href="https://github.com/apps/utterances" target="_blank">utterances app&lt;/a>，选择这个博客的repo&lt;/li>
&lt;li>在 &lt;code>config.toml&lt;/code> 中更改配置，将 &lt;code>[params.utterances]&lt;/code> 下的 &lt;code>repo&lt;/code> 改成这个repo的名字即可。（可以新开一个repo来储存评论，不过评论会以&lt;code>issues&lt;/code>的形式出现在repo里，所以没必要新开一个）&lt;/li>
&lt;/ol>
&lt;h2 id="一些其他的魔改">一些其他的魔改&lt;/h2>
&lt;h3 id="更改右上方的导航栏">更改右上方的导航栏&lt;/h3>
&lt;p>先打开 &lt;code>view-source&lt;/code> 的博客，找到导航栏的 &lt;code>class=&amp;quot;post-toc&amp;quot;&lt;/code>。&lt;/p>
&lt;p>然后利用 &lt;a href="https://stackoverflow.com/questions/16956810/how-do-i-find-all-files-containing-specific-text-on-linux" target="_blank">Linux的根据content搜索文件&lt;/a>，使用 &lt;code>grep -rnwl '.' -e 'post-toc-title'&lt;/code> 找到相应的文件。最后在 &lt;code>./themes/even/assets/sass/_partial/_post/_toc.scss&lt;/code> 和 &lt;code>./themes/even/assets/sass/_variables.scss&lt;/code> 找到了相关信息。&lt;/p>
&lt;h2 id="一些注意事项">一些注意事项&lt;/h2>
&lt;ol>
&lt;li>博客默认模版的最底部有一个 `&lt;/li>
&lt;/ol></description></item></channel></rss>