<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>平衡树 on tom0727's blog</title><link>https://tom0727.github.io/tags/%E5%B9%B3%E8%A1%A1%E6%A0%91/</link><description>Recent content in 平衡树 on tom0727's blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 16 Oct 2023 21:57:15 -0500</lastBuildDate><atom:link href="https://tom0727.github.io/tags/%E5%B9%B3%E8%A1%A1%E6%A0%91/index.xml" rel="self" type="application/rss+xml"/><item><title>Splay</title><link>https://tom0727.github.io/post/118-splay/</link><pubDate>Mon, 16 Oct 2023 21:57:15 -0500</pubDate><guid>https://tom0727.github.io/post/118-splay/</guid><description>介绍 Splay 是一种自平衡的 BST（二叉搜索树）。 模版 代码 struct Splay { struct Node { int par, child[2], sz, cnt; ll val, flag; } tr[maxn]; int rt, id = 0; void push_up(int cur) { if (!cur) return; int lc = tr[cur].child[0], rc = tr[cur].child[1]; tr[cur].sz = tr[lc].sz + tr[rc].sz + tr[cur].cnt; } void push_down(int</description></item></channel></rss>