<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>线段树 on tom0727's blog</title><link>https://tom0727.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/</link><description>Recent content in 线段树 on tom0727's blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 22 Feb 2023 15:48:08 -0600</lastBuildDate><atom:link href="https://tom0727.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/index.xml" rel="self" type="application/rss+xml"/><item><title>吉司机线段树（Segment Tree Beats）</title><link>https://tom0727.github.io/post/097-segment-tree-beats/</link><pubDate>Wed, 22 Feb 2023 15:48:08 -0600</pubDate><guid>https://tom0727.github.io/post/097-segment-tree-beats/</guid><description>介绍 吉司机线段树可以做到： 区间最大/最小操作（对一个区间内的所有数取 max 或者 min） 维护区间历史最值 我们直接看一道例题： 题意 给定一个数组 $a_1, a_2, &amp;hellip;</description></item><item><title>树套树</title><link>https://tom0727.github.io/post/067-%E6%A0%91%E5%A5%97%E6%A0%91/</link><pubDate>Thu, 20 Jan 2022 18:30:51 +0800</pubDate><guid>https://tom0727.github.io/post/067-%E6%A0%91%E5%A5%97%E6%A0%91/</guid><description>介绍 树套树常常用于解决一些二维数点问题。 经典的问题如：矩阵内查询和/最大值，更新矩阵内一个点的值等等。 在介绍树套树之前，先简单讲一下树状数组</description></item><item><title>权值线段树（动态开点）</title><link>https://tom0727.github.io/post/035-%E6%9D%83%E5%80%BC%E7%BA%BF%E6%AE%B5%E6%A0%91/</link><pubDate>Sat, 27 Mar 2021 20:13:23 +0800</pubDate><guid>https://tom0727.github.io/post/035-%E6%9D%83%E5%80%BC%E7%BA%BF%E6%AE%B5%E6%A0%91/</guid><description>介绍 权值线段树 权值线段树用于维护一定值域内，各个元素出现的次数，结合动态开点可以 避免离散化的处理。 举个例子，我们现在有一个长度为 $10$ 的数组 $[1,5,2,3,4,1,3,4,4,4]$ $1$</description></item><item><title>线段树/树状数组/分块 例题</title><link>https://tom0727.github.io/post/032-%E7%BA%BF%E6%AE%B5%E6%A0%91%E4%BE%8B%E9%A2%98/</link><pubDate>Tue, 16 Mar 2021 22:10:22 +0800</pubDate><guid>https://tom0727.github.io/post/032-%E7%BA%BF%E6%AE%B5%E6%A0%91%E4%BE%8B%E9%A2%98/</guid><description>主要记录一些遇到的线段树/分块例题。 例1 CF438D 题意 给定 $N$ 个正整数和 $M$ 个询问，询问有 3 种： $1 ~ l ~ r$：输出 $\sum\limits_{i=l}^r a_i$ $2 ~ l ~ r ~ x$：将 $a_l$ 到 $a_r$ 的所有数</description></item></channel></rss>