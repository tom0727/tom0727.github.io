<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>背包 on tom0727's blog</title><link>https://tom0727.github.io/tags/%E8%83%8C%E5%8C%85/</link><description>Recent content in 背包 on tom0727's blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 11 Apr 2021 21:42:06 +0800</lastBuildDate><atom:link href="https://tom0727.github.io/tags/%E8%83%8C%E5%8C%85/index.xml" rel="self" type="application/rss+xml"/><item><title>背包问题</title><link>https://tom0727.github.io/post/039-%E8%83%8C%E5%8C%85/</link><pubDate>Sun, 11 Apr 2021 21:42:06 +0800</pubDate><guid>https://tom0727.github.io/post/039-%E8%83%8C%E5%8C%85/</guid><description>&lt;h3 id="多重背包二进制">多重背包二进制&lt;/h3>
&lt;pre>&lt;code class="language-cpp">int n, V;
int dp[2005];
void pack01(int v, int w) {
for (int j = V; j &amp;gt;= v; j--) {
dp[j] = max(dp[j], dp[j-v] + w);
}
}
int main() {
cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; V;
while (n--) {
int v,w,s; cin &amp;gt;&amp;gt; v &amp;gt;&amp;gt; w &amp;gt;&amp;gt; s;
int k = 1;
while (k &amp;lt;= s) {
pack01(v*k, w*k);
s -= k;
k &amp;lt;&amp;lt;= 1;
}
pack01(v*s, w*s);
}
int ans = 0;
for (int j = 0; j &amp;lt;= V; j++) ans = max(ans, dp[j]);
cout &amp;lt;&amp;lt; ans &amp;lt;&amp;lt; endl;
}
&lt;/code>&lt;/pre>
&lt;h3 id="多重背包单调队列优化">多重背包（单调队列优化）&lt;/h3>
&lt;pre>&lt;code class="language-cpp">struct node {
int pos, val;
} q[20005];
int head = -1, tail = 0, n, V, dp[20005];
void solve(int v, int w, int s) {
for (int j = 0; j &amp;lt; v; j++) {
head = 0, tail = -1;
q[++tail] = {0,0};
for (int i = 1; i*v + j &amp;lt;= V; i++) {
while (i - q[head].pos &amp;gt; s) head++;
int cur = i*v + j;
int val = dp[cur] - i*w;
dp[cur] = max(dp[cur], q[head].val + i*w);
while (head &amp;lt;= tail &amp;amp;&amp;amp; val &amp;gt;= q[tail].val) tail--;
q[++tail] = {i, val};
}
}
}
int main() {
cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; V;
for (int i = 1; i &amp;lt;= n; i++) {
int v,w,s; cin &amp;gt;&amp;gt; v &amp;gt;&amp;gt; w &amp;gt;&amp;gt; s;
solve(v,w,s);
}
int ans = 0;
for (int j = 0; j &amp;lt;= V; j++) ans = max(ans, dp[j]);
cout &amp;lt;&amp;lt; ans &amp;lt;&amp;lt; endl;
}
&lt;/code>&lt;/pre></description></item></channel></rss>